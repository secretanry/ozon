// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: user.proto

package handlers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LinksService_PostFullLink_FullMethodName = "/links.LinksService/PostFullLink"
	LinksService_GetFullLink_FullMethodName  = "/links.LinksService/GetFullLink"
)

// LinksServiceClient is the client API for LinksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinksServiceClient interface {
	PostFullLink(ctx context.Context, in *LongLinkRequest, opts ...grpc.CallOption) (*PostFullLinkResponse, error)
	GetFullLink(ctx context.Context, in *ShortLinkRequest, opts ...grpc.CallOption) (*GetFullLinkResponse, error)
}

type linksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLinksServiceClient(cc grpc.ClientConnInterface) LinksServiceClient {
	return &linksServiceClient{cc}
}

func (c *linksServiceClient) PostFullLink(ctx context.Context, in *LongLinkRequest, opts ...grpc.CallOption) (*PostFullLinkResponse, error) {
	out := new(PostFullLinkResponse)
	err := c.cc.Invoke(ctx, LinksService_PostFullLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linksServiceClient) GetFullLink(ctx context.Context, in *ShortLinkRequest, opts ...grpc.CallOption) (*GetFullLinkResponse, error) {
	out := new(GetFullLinkResponse)
	err := c.cc.Invoke(ctx, LinksService_GetFullLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinksServiceServer is the server API for LinksService service.
// All implementations must embed UnimplementedLinksServiceServer
// for forward compatibility
type LinksServiceServer interface {
	PostFullLink(context.Context, *LongLinkRequest) (*PostFullLinkResponse, error)
	GetFullLink(context.Context, *ShortLinkRequest) (*GetFullLinkResponse, error)
	mustEmbedUnimplementedLinksServiceServer()
}

// UnimplementedLinksServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLinksServiceServer struct {
}

func (UnimplementedLinksServiceServer) PostFullLink(context.Context, *LongLinkRequest) (*PostFullLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostFullLink not implemented")
}
func (UnimplementedLinksServiceServer) GetFullLink(context.Context, *ShortLinkRequest) (*GetFullLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullLink not implemented")
}
func (UnimplementedLinksServiceServer) mustEmbedUnimplementedLinksServiceServer() {}

// UnsafeLinksServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinksServiceServer will
// result in compilation errors.
type UnsafeLinksServiceServer interface {
	mustEmbedUnimplementedLinksServiceServer()
}

func RegisterLinksServiceServer(s grpc.ServiceRegistrar, srv LinksServiceServer) {
	s.RegisterService(&LinksService_ServiceDesc, srv)
}

func _LinksService_PostFullLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LongLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServiceServer).PostFullLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinksService_PostFullLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServiceServer).PostFullLink(ctx, req.(*LongLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinksService_GetFullLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServiceServer).GetFullLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinksService_GetFullLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServiceServer).GetFullLink(ctx, req.(*ShortLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LinksService_ServiceDesc is the grpc.ServiceDesc for LinksService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LinksService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "links.LinksService",
	HandlerType: (*LinksServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostFullLink",
			Handler:    _LinksService_PostFullLink_Handler,
		},
		{
			MethodName: "GetFullLink",
			Handler:    _LinksService_GetFullLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
